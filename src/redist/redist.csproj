<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.tasks))\dir.tasks" />
  <Import Project="$(RepoRoot)/build/compile/LzmaArchive.targets" />
  <Import Project="$(RepoRoot)/build/MSBuildExtensions.targets" />

   <PropertyGroup>
    <TargetFramework>$(CliTargetFramework)</TargetFramework>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <AssetTargetFallback>dotnet5.4</AssetTargetFallback>
    <PublishDir>$(SdkOutputDirectory)</PublishDir>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETCore.App" Version="$(MicrosoftNETCoreAppPackageVersion)" />
  </ItemGroup>

  <Target Name="DoComposeSdk" 
          DependsOnTargets="PrepareOutputDirectory;
                            PublishRuntimes;
                            PublishToolset;
                            PublishTemplates;
                            PublishFallbackNupkgs;
                            PublishLzmaArchive;
                            CrossgenPublishDir;
                            PublishDotnetTools;
                            PublishVersionFile;
                            PublishAppHostTemplate;
                            RetargetTools;
                            GenerateMSBuildExtensions"
          AfterTargets="Publish" />

  <Target Name="PrepareOutputDirectory">
    <RemoveDir Directories="$(OutputDirectory)" />
    <MakeDir Directories="$(OutputDirectory)"/>
  </Target>

  <Target Name="PublishRuntimes">
    <ItemGroup>
      <SharedFramework Remove="*" />
      <SharedFramework Include="$(SharedFrameworkPublishDirectory)/**/*" />
      <SharedFramework Include="$(AspNetCoreSharedFxPublishDirectory)/**/*" />
      <SharedFramework Include="$(WinFormsAndWpfSharedFxPublishDirectory)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(SharedFramework)"
          DestinationFiles="@(SharedFramework->'$(OutputDirectory)/%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="PublishToolset">
    <ItemGroup>
      <Toolset Remove="*" />
      <Toolset Include="$(ToolsetPublishDirectory)/**/*" />

      <!-- Workaround for https://github.com/dotnet/toolset/issues/8 -->
      <Toolset Remove="$(ToolsetPublishDirectory)/ref/**/*"/>
    </ItemGroup>

    <Copy SourceFiles="@(Toolset)"
          DestinationFiles="@(Toolset->'$(SdkOutputDirectory)/%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="PublishDotnetTools"
          Condition="'$(CLIBUILD_SKIP_BUNDLEDDOTNETTOOLS)' != 'true'"
          AfterTargets="Publish">
    <ItemGroup>
      <DotnetToolsToBundle Include="$(RepoRoot)/build/BundledDotnetTools.proj">
        <Properties>
          DotnetToolsLayoutDirectory=$(SdkOutputDirectory)/DotnetTools;
          TemplateFillInPackageName=%(BundledDotnetTools.Identity);
          TemplateFillInPackageVersion=%(BundledDotnetTools.Version);
          PreviousStageDirectory=$(PreviousStageDirectory)
        </Properties>
      </DotnetToolsToBundle>
    </ItemGroup>

    <MSBuild
      BuildInParallel="False"
      Projects="@(DotnetToolsToBundle)">
    </MSBuild>
  </Target>

  <Target Name="PublishAppHostTemplate" DependsOnTargets="RunResolvePackageDependencies">

    <PropertyGroup>
      <NETCoreDotNetAppHostPackageName>Microsoft.NETCore.DotNetAppHost</NETCoreDotNetAppHostPackageName>
    </PropertyGroup>

    <ItemGroup>
      <NETCoreDotNetAppHostPackageVersions Include="@(PackageDefinitions->'%(Version)')"
                                           Condition="%(PackageDefinitions.Name) == $(NETCoreDotNetAppHostPackageName)" />
    </ItemGroup>

    <Error Condition="@(NETCoreDotNetAppHostPackageVersions->Distinct()->Count()) != 1"
           Text="Failed to determine the $(NETCoreDotNetAppHostPackageName) version pulled in Microsoft.NETCore.App" />

    <PropertyGroup>
      <_NETCoreDotNetAppHostPackageVersion>@(NETCoreDotNetAppHostPackageVersions->Distinct())</_NETCoreDotNetAppHostPackageVersion>
    </PropertyGroup>

    <ItemGroup>
      <AppHostTemplate Include="$(RepoRoot)/build/AppHostTemplate.proj">
        <Properties>
          AppHostTemplatePath=$(SdkOutputDirectory)/AppHostTemplate;
          TemplateFillInPackageName=$(NETCoreDotNetAppHostPackageName);
          TemplateFillInPackageVersion=$(_NETCoreDotNetAppHostPackageVersion);
          PreviousStageDirectory=$(PreviousStageDirectory);
          AppHostIntermediateDirectory=$(IntermediateDirectory)/AppHostIntermediate
        </Properties>
      </AppHostTemplate>
    </ItemGroup>

    <MSBuild
      BuildInParallel="False"
      Projects="@(AppHostTemplate)">
    </MSBuild>

  </Target>

  <Target Name="PublishVersionFile">
    <WriteLinesToFile File="$(PublishDir)/.version"
                      Lines="$(CommitHash);$(SdkVersion);$(Rid)"
                      Overwrite="true" />
  </Target>

  <Target Name="CrossgenPublishDir"
          Condition=" '$(DISABLE_CROSSGEN)' == '' And !$(Architecture.StartsWith('arm')) "
          AfterTargets="PublishSdks">
    <ItemGroup>
      <RoslynFiles Include="$(PublishDir)Roslyn\bincore\**\*" />
      <FSharpFiles Include="$(PublishDir)FSharp\**\*" Exclude="$(PublishDir)FSharp\FSharp.Build.dll" />
      <RemainingFiles Include="$(PublishDir)**\*" Exclude="@(RoslynFiles);@(FSharpFiles)" />

      <!-- Removing Full CLR built TestHost assemblies from getting Crossgen as it is throwing error -->
      <RemainingFiles Remove="$(PublishDir)TestHost*\**\*" />
      <RemainingFiles Remove="$(PublishDir)Sdks\**\*" />
      <RemainingFiles Remove="$(PublishDir)**\Microsoft.TestPlatform.Extensions.EventLogCollector.dll" />

      <!-- Add back the .NET Core assemblies in the Sdks folder -->
      <RemainingFiles Include="$(PublishDir)Sdks\Microsoft.NET.Sdk\tools\netcoreapp2.0\**\*" />
      <RemainingFiles Include="$(PublishDir)Sdks\NuGet.Build.Tasks.Pack\CoreCLR\**\*" />

      <!-- Don't try to CrossGen .NET Framework support assemblies for .NET Standard -->
      <RemainingFiles Remove="$(PublishDir)Microsoft\Microsoft.NET.Build.Extensions\net*\**\*" />

      <!-- Don't crossgen satellite assemblies -->
      <RoslynFiles Remove="$(PublishDir)Roslyn\bincore\**\*.resources.dll" />
      <FSharpFiles Remove="$(PublishDir)FSharp\**\*.resources.dll" />
      <RemainingFiles Remove="$(PublishDir)**\*.resources.dll" />

      <DiasymReaderPath Include="$(SharedFrameworkNameVersionPath)/Microsoft.DiaSymReader.Native.*.dll" />
    </ItemGroup>

    <AddMetadataIsPE Items="@(RoslynFiles)">
      <Output TaskParameter="ResultItems" ItemName="RoslynFilesWithPEMarker" />
    </AddMetadataIsPE>
    <AddMetadataIsPE Items="@(FSharpFiles)">
      <Output TaskParameter="ResultItems" ItemName="FSharpFilesWithPEMarker" />
    </AddMetadataIsPE>
    <AddMetadataIsPE Items="@(RemainingFiles)">
      <Output TaskParameter="ResultItems" ItemName="RemainingFilesWithPEMarker" />
    </AddMetadataIsPE>

    <ItemGroup>
      <RoslynTargets Include="%(RoslynFilesWithPEMarker.FullPath)" Condition=" '%(RoslynFilesWithPEMarker.IsPE)' == 'True' " />
      <FSharpTargets Include="%(FSharpFilesWithPEMarker.FullPath)" Condition=" '%(FSharpFilesWithPEMarker.IsPE)' == 'True' " />
      <RemainingTargets Include="%(RemainingFilesWithPEMarker.FullPath)" Condition=" '%(RemainingFilesWithPEMarker.IsPE)' == 'True' " />

      <RoslynFolders Include="@(RoslynTargets-&gt;DirectoryName()-&gt;Distinct())" />
      <FSharpFolders Include="@(FSharpTargets-&gt;DirectoryName()-&gt;Distinct())" />
      <RemainingFolders Include="@(RemainingTargets-&gt;DirectoryName()-&gt;Distinct())" />

      <!-- FSharp.Build.dll causes the FSharp folder to be included. Remove it, as we don't want other FSharp dlls being included in the crossgen. -->
      <RemainingFolders Remove="$(PublishDir)FSharp\**\*" />
    </ItemGroup>

    <!-- Ensure crossgen tool is executable.  See https://github.com/NuGet/Home/issues/4424 -->
    <Chmod Condition=" '$(OSName)' != 'win' "
           Glob="$(CrossgenPath)"
           Mode="u+x" />

    <!-- Crossgen does not support generating symbols on Mac  -->
    <PropertyGroup Condition="'$(CreateCrossgenSymbols)' == ''">
      <CreateCrossgenSymbols>true</CreateCrossgenSymbols>
      <CreateCrossgenSymbols Condition="'$(OSName)' == 'osx'">false</CreateCrossgenSymbols>
   </PropertyGroup>

    <Crossgen
        SourceAssembly="%(RoslynTargets.FullPath)"
        DestinationPath="%(RoslynTargets.FullPath)"
        JITPath="$(LibCLRJitPath)"
        CrossgenPath="$(CrossgenPath)"
        ReadyToRun="True"
        CreateSymbols="$(CreateCrossgenSymbols)"
        DiasymReaderPath="@(DiasymReaderPath)"
        PlatformAssemblyPaths="@(PlatformAssemblies);@(RoslynFolders);$(SharedFrameworkNameVersionPath)" />

    <Crossgen
        SourceAssembly="%(FSharpTargets.FullPath)"
        DestinationPath="%(FSharpTargets.FullPath)"
        JITPath="$(LibCLRJitPath)"
        CrossgenPath="$(CrossgenPath)"
        ReadyToRun="True"
        CreateSymbols="$(CreateCrossgenSymbols)"
        DiasymReaderPath="@(DiasymReaderPath)"
        PlatformAssemblyPaths="@(PlatformAssemblies);@(FSharpFolders);$(SharedFrameworkNameVersionPath)" />

    <Crossgen
        SourceAssembly="%(RemainingTargets.FullPath)"
        DestinationPath="%(RemainingTargets.FullPath)"
        JITPath="$(LibCLRJitPath)"
        CrossgenPath="$(CrossgenPath)"
        ReadyToRun="True"
        CreateSymbols="$(CreateCrossgenSymbols)"
        DiasymReaderPath="@(DiasymReaderPath)"
        PlatformAssemblyPaths="@(PlatformAssemblies);@(RemainingFolders);$(SharedFrameworkNameVersionPath)" />
  </Target>

  <Target Name="ChmodPublishDir"
          AfterTargets="CrossgenPublishDir"
          Condition=" '$(OSName)' != 'win' ">

    <Exec Command="find $(SdkOutputDirectory) -type d -exec chmod 755 {} \;" />
    <Exec Command="find $(SdkOutputDirectory) -type f -exec chmod 644 {} \;" />
    <Chmod Mode="755" Glob="$(SdkOutputDirectory)/FSharp/RunFsc.sh" />
  </Target>

  <Target Name="SeparateSymbolsFromPublishDir"
          AfterTargets="CrossgenPublishDir">
    <ItemGroup>
      <PdbsToMove Include="$(PublishDir)/**/*.pdb" />
      <PdbsToMove Include="$(PublishDir)/**/*.ni.*.map" />
    </ItemGroup>

    <Move SourceFiles="@(PdbsToMove)"
          DestinationFiles="@(PdbsToMove->'$(SymbolsDirectory)/sdk/$(SdkVersion)/%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="PublishTemplates">
    <ItemGroup>
      <TemplatesToBundle Include="$(RepoRoot)/build/BundledTemplates.proj">
        <Properties>
          TemplateLayoutDirectory=$(SdkOutputDirectory)/Templates;
          TemplateFillInPackageName=%(BundledTemplate.Identity);
          TemplateFillInPackageVersion=%(BundledTemplate.Version);
          PreviousStageDirectory=$(PreviousStageDirectory)
        </Properties>
      </TemplatesToBundle>
    </ItemGroup>

    <MSBuild
      BuildInParallel="False"
      Projects="@(TemplatesToBundle)">
    </MSBuild>
  </Target>

  <Target Name="PublishFallbackNupkgs">
    <RemoveDir Directories="$(NuGetFallbackFolderOutputDirectory)" />

    <ItemGroup>
      <NupkgsToBundle Include="$(RepoRoot)/build/BundledNupkgs.proj">
        <Properties>
          TemplateFillInPackageName=%(BundledNupkg.Identity);
          TemplateFillInPackageVersion=%(BundledNupkg.Version);
        </Properties>
      </NupkgsToBundle>
    </ItemGroup>
    
    <MSBuild
      BuildInParallel="False"
      Projects="@(NupkgsToBundle)">
    </MSBuild>
  </Target>

  <Target Name="PublishLzmaArchive"
          Condition="'$(CLIBUILD_SKIP_LZMA)' != 'true'"
          DependsOnTargets="GetNuGetPackagesArchive">
  </Target>

  <Target Name="RetargetTools">
    <PropertyGroup>
      <ReplacementPattern>"version": ".*"</ReplacementPattern>
      <ReplacementString>"version": "$(MicrosoftNETCoreAppPackageVersion)"</ReplacementString>
    </PropertyGroup>
    <ItemGroup>
      <ToolRuntimeConfigPath Include="$(PublishDir)/**/*.runtimeconfig.json" />
    </ItemGroup>
    <ReplaceFileContents
      InputFiles="@(ToolRuntimeConfigPath)"
      DestinationFiles="@(ToolRuntimeConfigPath)"
      ReplacementPatterns="$(ReplacementPattern)"
      ReplacementStrings="$(ReplacementString)" />
  </Target>
</Project>
